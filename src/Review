/*Exam Essentials

Chapter 1
1.Write a main() method
/*
  public class Zoo {
  public static void main(String[] args) {
    System.out.println(args[0]);
   System.out.println(args[1]);
} }
*/
//java Zoo Bronx Zoo 

//What is the output of this?

2.Understand the effect of using packages and imports.

import java.nio.file.Files;
import java.nio.file.Paths;

import java.nio.*;
import java.nio.*.*;

3.Be able to recognize a constructor. 

4.Be able to identify legal and illegal declarations and initialization.
  a.Identifiers may contain letters, numbers, $, or _.
  b.Cannot start with numbers.
5.Be able to determine where variables go into and out of scope
/* public void eatIfHungry(boolean hungry) {
   if (hungry) {
     int bitesOfCheese = 1;
     {
        boolean teenyBit = true;
        System.out.println(bitesOfCheese);
     }
   }
   System.out.println(teenyBit);  // DOES NOT COMPILE
 }
 */
6.Be able to recognize misplaced statements in a class.
7.Know how to identify when an object is eligible for garbage collection.
/*
finalize() method

/*
Chapter 2
1.Be able to write code that uses Java operators.
Operator precedence decreasing order of operator precedence
Java guarantees left-to-right evaluation

Post-unary operators	expression++ 
Pre-unary operators	++ expression
Other unary operators	!
Multiplication/Division/Modulus	%
Addition/Subtraction	+ , -
Shift operators	≪, ≫, ≫>
Relational operators	< , > , <= , >= , instanceof
Equal to/not equal to	== , !=
Logical operators	& , ^ , |
Short-circuit logical operators	&& , ||
Ternary operators	boolean expression ? expression1 : expression2
Assignment operators	= , += , -= , *=, /=, %=, &=, ^=, !=, ≪=, ≫=, ≫>=
        System.out.println("& Bitwise AND");
        System.out.println(true & true);
        System.out.println(true & false);
        System.out.println(false & false);
        /* A or B, but not, A and B
            Input 	            Output
            A   ^    B
            F   ^    F 	        F
            F   ^    T 	        T
            T   ^    F 	        T
            T   ^    T 	        F
         */
        System.out.println("^ Bitwise exclusive OR 'XOR'");
        System.out.println(true ^ true);
        System.out.println(true ^ false);
        System.out.println(false ^ false);
        /* A or B
            Input 	            Output
            A   |    B
            F   |    F 	        F
            F   |    T 	        T
            T   |    F 	        T
            T   |    T 	        T
         */
2.Be able to recognize which operators are associated with which data types.
3.Understand Java operator precedence. 
4.Be able to write code that uses parentheses to override operator precedence. 
5.Understand if and switch decision control statements. 
6.Understand loop statements. 
7.Understand how break and continue can change flow control. 
*/

/*
Chapter 4

1.Be able to determine the output of code using String.
System.out.println(1 + 2);          
System.out.println("a" + "b");      
System.out.println("a" + "b" + 3);  
System.out.println(1 + 2 + "c");     


// 3
// ab
// ab3
// 3c

2.Be able to determine the output of code using StringBuilder.
String class, StringBuilder is not immutable.

 StringBuilder alpha = new StringBuilder();
 for(char current = 'a'; current <= 'z'; current++)
  alpha.append(current);
 System.out.println(alpha);
 
 StringBuilder is reused in the loop. 

3.Understand the difference between == and equals. == checks object equality.
String x = "Hello World";
String y = "Hello World";
System.out.println(x == y); //A

String x = "Hello World";
String z = " Hello World".trim();
System.out.println(x == z); //B
System.out.println(x.equals(z));//C

A is true
The JVM created only one literal in memory. x and y both point to the same location in memory;
B is false
We don't have two of the same String literal. Although x and z happen to evaluate to the same string, one is computed at runtime.
C is true
If you call equals() on two StringBuilder instances, it will check reference equality


4.Be able to determine the output of code using arrays. 
int[] numbers1 = new int[3];

5.Be able to determine the output of code using ArrayList 
 binarysearch
 3: int[] numbers = {2,4,6,8};
4: System.out.println(Arrays.binarySearch(numbers, 2));
5: System.out.println(Arrays.binarySearch(numbers, 4));
6: System.out.println(Arrays.binarySearch(numbers, 1)); 
7: System.out.println(Arrays.binarySearch(numbers, 3)); 
8: System.out.println(Arrays.binarySearch(numbers, 9)); 


4:// 0
5:// 1
6:// -1
7: // -2
8: // -5
  
6.Recognize invalid uses of dates and times. 
LocalDate d = new LocalDate();

Don't fall for this. You are not allowed to construct a date or time object directly.

LocalDate.of(2015, Month.JANUARY, 32)    

throws DateTimeException



*/
